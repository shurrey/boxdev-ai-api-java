

        String body = "{"
                .concat( "\"mode\": \"single_item_qa\"," )
                .concat( "\"prompt\":" )
                .concat( "\"" + prompt + "\"")
                .concat( ",")
                .concat( "\"items\": [")
                .concat( "{")
                .concat( "\"id\": " )
                .concat( "\"" + fileId + "\",")
                .concat( "\"type\": \"file\"" )
                .concat(    "}")
                .concat( "],")
                .concat( "\"dialogue_history\": [ ],")
                .concat( "\"config\": {")
                .concat(    "\"is_streamed\": true")
                .concat( "}")
                .concat( "}");
        log.info(body);
                
		try {
			BoxAPIConnection api = new BoxAPIConnection(token);
            URL boxAiUrl = new URL("https://api.box.com/2.0/ai/ask");
            BoxAPIRequest req = new BoxAPIRequest(api, boxAiUrl, HttpMethod.POST);
            req.setBody(body);
            BoxAPIResponse res = req.send();

            InputStream answerStream = res.getBody();

            try {
                InputStreamReader reader = new InputStreamReader(answerStream, UTF_8);
                StringBuilder builder = new StringBuilder();
                char[] buffer = new char[1024];

                //builder.append('[');

                int read = reader.read(buffer, 0, 1024);
                while (read != -1) {
                    builder.append(buffer, 0, read);
                    read = reader.read(buffer, 0, 1024);
                    if(read != -1) {
                        builder.append(',');
                    }
                    System.out.print(builder.toString());
                }

                //builder.append(']');
                reader.close();
                answer = builder.toString();

                answerJson = new JSONArray(answer);

                //answer = res.bodyToString();

            
                /*ByteArrayOutputStream result = new ByteArrayOutputStream();
                byte[] buffer = new byte[1024];
                for (int length; (length = answerStream.read(buffer)) != -1; ) {
                    result.write(buffer, 0, length);
                }

                answer = result.toString("UTF-8");

                //answerJson = new JSONArray("[" + answer + "]");

                BufferedReader bufferedReader = new BufferedReader(new StringReader(answer));

                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    sb.append(line);
                }

                answerJson = new JSONObject(sb.toString()); 
                
                
                //BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(answerStream));
                //*/
                
            } catch(Exception e) {
                // if any I/O error occurs
                e.printStackTrace();
            } //finally {
                // releases system resources associated with this stream
            //    if(answerStream!=null)
            //    answerStream.close();
            //}

		} catch (Exception e) {
			log.info("Error processing: " + e.toString());
		}